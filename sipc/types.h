/*
This file is part of Bressein.
Copyright (C) 2011  颜烈彬 <slbyan@gmail.com>

Bressein is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

Bressein is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

OpenSSL linking exception
--------------------------
If you modify this Program, or any covered work, by linking or
combining it with the OpenSSL project's "OpenSSL" library (or a
modified version of that library), containing parts covered by
the terms of OpenSSL/SSLeay license, the licensors of this
Program grant you additional permission to convey the resulting
work. Corresponding Source for a non-source form of such a
combination shall include the source code for the parts of the
OpenSSL library used as well as that of the covered work.
*/

#ifndef BRESSIEN_TYPES_H
#define BRESSIEN_TYPES_H
#include <QDebug>
class QByteArray;
class QTcpSocket;
namespace Bressein
{
// from levin's openfetion
/**
 * @brief Presence states
 **/
enum StateType
{
    ONLINE =       400,
    RIGHTBACK =    300,
    AWAY =         100,
    BUSY =         600,
    OUTFORLUNCH =  500,
    ONTHEPHONE =   150,
    MEETING =      850,
    DONOTDISTURB = 800,
    HIDDEN =       0,
    OFFLINE =      -1
};
/**
 * @brief Type to indicate user's service status
 **/
enum StatusType
{
    STATUS_NORMAL = 1,       //normal status
    STATUS_OFFLINE,          //user offline
    STATUS_NOT_AUTHENTICATED,//user has not accept your add buddy request
    STATUS_SMS_ONLINE,       //user has not start fetion service
    STATUS_REJECTED,         //user rejected your add buddy request
    STATUS_SERVICE_CLOSED,   //user has closed his fetion service
    STATUS_NOT_BOUND         //user doesn't bound fetion to a mobile number
};
/**
 * @brief some other buddylists
 **/
enum BuddyListType
{
    BUDDY_LIST_NOT_GROUPED = 0 ,
    BUDDY_LIST_STRANGER = -1 ,
    BUDDY_LIST_PGGROUP = -2
};
/**
 * @brief Type used to indicate whether user's portrait has been changed
 **/
enum ImageChangedType
{
    IMAGE_NOT_INITIALIZED = -1 ,//portrait has not been initialized
    IMAGE_NOT_CHANGED ,         //portrait does not change
    IMAGE_CHANGED ,             //portrait has been changed
    IMAGE_ALLREADY_SET
};

struct ContactInfo
{
    // from contact list
    // i: userId,  n:local name
    // o: group id, p: identity
    // r; relationStatus, u: sipuri

    // this is determinant
//     QByteArray sipuri;     //sipuri like 'sip:sId@fetion.com.cn'
    // a socket for its  conversation, close the socket if conversion ends.
    // struct that will be display in contact item
    QByteArray userId;
    QByteArray localName;
    QByteArray groupId;  //TODO use group name
    QByteArray identity;
    QByteArray relationStatus;  //AUTHENTICATED or not
    QByteArray impresa;
    QByteArray devicetype; //user's client type , like PC and J2ME,etc
    QByteArray portraitCrc;//a number generated by crc algorithm
    StateType state;        //state type like online,busy,etc
    QByteArray mobileno;   //mobile phone number
    QByteArray nickName;
    QByteArray birthdate;   //user's bitrhday
    QByteArray country;    //user's country's simplified form,like CN
    QByteArray province;   //user's province's simplified form,like bj
    QByteArray city;       //user's city's code ,like 10 for beijing
    // other stuffs
    QByteArray scoreLevel;        //user's score level,unused now
    QByteArray serviceStatus;     //basic service status
    QByteArray carrierStatus;
    QByteArray carrier;
    QByteArray gender;   //gender '1' for male '2' for female,'0' for private
    QByteArray imageChanged; //whether user's portrait has changed
    // int dirty;   //whether the contact read from the server is latest
};

typedef QMap<QByteArray, ContactInfo *> Contacts; // <sipuri, info>

struct Group
{
    QByteArray groupname; // current buddy list name
    QByteArray groupId;          // current buddy list Id
//         QByteArray dirty;
};
//TODO
// pggroupmember
// pggroup
}

#endif

